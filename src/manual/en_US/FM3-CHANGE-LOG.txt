/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
 
Because the Manual won't be updated for a good while, I will lead
the FreeMarer 3 changelog here:

- Increased version number to 3.0.0 (nightly aka. SNAPSHOT)
- Removed legacy extensions: rhyno, jython, xml (not to be confused with dom), jdom, ant.
- Removed JSP 2.0 support (2.1 and Servlet 2.5 is the minimum for now, but maybe it will be 2.2 and Servlet 3.0 later).
- Removed freemarker.ext.log, our log abstraction layer from the old times when there was no clear winner on this field.
  Added org.slf4j:slf4j-api as required dependency instead.
- Removed all classes with "main" methods that were part of freemarker.jar. Such tools should be separate artifacts,
  not part of the library, and they are often classified as CWE-489 "Leftover Debug Code". The removed classes are:
  freemarker.core.CommandLine, freemarker.ext.dom.Transform, freemarker.template.utility.ToCanonical
- Removed classic_compatible (classicCompatible) setting, which was used to emulate some of the FreeMarker 1.x behavior
- Removed utility TemplateModel-s that can very easily mean a security problem: freemarker.template.utility.Execute and 
  freemarker.template.utility.ObjectConstructor
- Removed TemplateClassResolver.SAFER_RESOLVER, because the classes it has blocked were removed from FreeMarker, so it's
  the same as UNRESTRICTED_RESOLVER
- Removed the strict_syntax setting, and so also the support for FTL tags without #. This was a FreeMarker 1.x
  compatibility option.
- Removed deprecated FMParser contstructors.
- Minimum Java version increased to 7, but without try-with-resource as that's unavailable before Android 4.4 KitKat.
- Totally redesigned TemplateLoader interface. The FM2 TemplateLoader can't be adapted (wrapped) to it, but usually
  it's fairly trivial to "rearrange" an old custom TemplateLoader for the new interface. The new TemplateLoader comes
  with several advantages, such as:
  - It can work more efficiently with sophisticated storage mechanisms like a database, as it's now possible to pack
    together the existence check, the last modification change check, and reading operations into less storage level
    operations (like you can do all of them with a single SQL statement).
  - The new TemplateLoader allows returning the template content either as an InputStream or as a Reader. Almost all
    TemplateLoader-s should return InputStream, and FreeMarker takes care of charset issues transparently (as a result,
    TemplateLoader-s don't have to support re-reading a template anymore, as we solve charset detection misses in
    memory). TemplateLoader-s that are inherently backed by text (String-s), such as templates stored in a varchar or
    CLOB column, should return a Reader. Note that templates created from a Reader will have template.getEncoding()
    null (logically, as no charset was involved), which was impossible in FreeMarker 2.
  - The change detection of the template doesn't have to rely on a millisecond resolution timestamp anymore; you can
    use what's most appropriate for the storage mechanism, such as a cryptographic hash or a revision number.
  - Template lookups (where you try multiple names until you find the best template) can now be transactional and/or
    atomic if the backing storage mechanism supports that, by utilizing the TemplateLoaderSession interface.
  - TemplateLoader can now return template-level settings like the output format (MIME type basically) of the loaded
    template, in case the backing storage stores such extra information. This mechanism can be used together with
    the TemplateConfiguration mechanism (already familiar from FreeMarker 2), and overrides the individual settings
    coming from there.
- Template constructors won't close the Reader passed in as agrument anymore (because a Reader should be closed
  by who has created it). This avoids some surprises from the past, such as the unablility to reset a Reader to a mark
  after parsing. If you call those constructors, be sure that you close the Reader yourself. (Obviously, it doesn't
  mater for StringReader-s.)
- Renamed top level java package from freemarker to org.apache.freemarker 
- Reorganized package structure. We will have a freemarker-core and a freemarker-servlet module later, so
  we got org.apache.freemarker.core (has nothing to do with the old freemarker.core) and
  org.apache.freemarker.servlet (this replaced freemarker.ext.servlet and freemarker.ext.jsp).
  Directly inside org.apache.freemarker.core we have most of the classes that were in
  freemarker.template and freemarker.core, however, model related classes (and object wrappers)
  were moved to org.apache.freemarker.core.model, and template loading and caching related classes
  to org.apache.freemarker.core.templateresolver (because later we will have a class called
  TemplateResolver, which is the central class of loading and caching and template name rules).
  OutputFormat realted classes were moved to org.apache.freemarker.core.outputformat.
  freemarker.ext.beans were moved under org.apache.freemarker.core.model.impl.beans for now (but later
  we only want a DefaultObject wrapper, no BeansWrapper, so this will change) and freemarker.ext.dom
  was moved to org.apache.freemarker.core.model.impl.dom.
- Moved the all the static final ObjectWrapper-s to the new _StaticObjectWrappers class, and made them
  write protected (non-configurable). Also now they come from the pool that ObjectWrapper builders use.
- WrappingTemplateModel.objectWrapper is now final, and its statically stored default value can't be set anymore.
- Removed SimpleObjectWrapper deprecated paramerless constructor
- Removed ResourceBundleLocalizedString and LocalizedString: Hardly anybody has discovered these, and they had no
  JUnit coverage.
- Added early draft of TemplateResolver, renamed TemplateCache to DefaultTemplateResolver. TemplateResolver is not
  yet directly used in Configuration. This was only added in a hurry, so that it's visible why the
  o.a.f.core.templateresolver subpackage name makes sense.
- Marked most static utility classes as internal, and renamed them to start with "_" (for example StringUtils was
  renamed to _StringUtil, thus people won't accidentally use it when they wanted to autocomplete to Apache Commons
  StringUtil). Created published static utility class, o.a.f.core.util.FTLUtil, which contains some methods moved
  over from the now internal utility classes.
- Deleted o.a.f.core.util.DOMNodeModel (it has noting to do with the standard XML support, o.a.f.core.model.dom)
- All CacheStorage-s must be thread safe from now on (removed ConcurrentCacheStorage marker interface)
- Removed support for incompatibleImprovements before 3.0.0. So currently 3.0.0 is the only support value.
- Changed the default of logTemplateExceptions to false.
- Removed `String Configurable.getSetting(String)` and `Properties getSettings()`. It has never worked well,
  and is impossible to implement properly.
- Even for setting values that are class names without following `()` or other argument list, the INSTANCE field and
  the builder class will be searched now, and used instead of the constructor of the class. Earlier they weren't for
  backward compatibility.
- Removed the deprecated BeansWrapper.nullModel setting. So null is always wrapped to null now.
- Removed several deprecated methods and constants. Some notes:
  - strict_bean_models configuration setting was removed, as it should be set on the BeansWrapper itself
  - .template_name now means the same as .current_template_name (it doesn't emulate 2.3 glitches anymore)
  - Removed the deprecated BeansWrapper.nullModel setting. So null is always wrapped to null now.
  - Removed the overridable BeansWrapper.finetuneMethodAppearance method, which was deprecated by the
    finetuneMethodAppearance setting (BeansWrapper.setFinetuneMethodAppearance).
  - Removed NodeModel static utility classes dealing with parsing XML to DOM. How it's best to do that is environment
    and application dependent, and it has security implications. Since XML loading/parsing is not the topic of the
    project, these were removed. Static methods that simplify an already loaded DOM have remained, because that's
    FreeMarker-specific functionality.
  - Removed parameterless DefaultObjectWrapper and BeansWrapper constructors. Now specifying the
    incomplatibleImprovement version is required.
  - Removed the static default Configuration instance. (It's not possible to create a template with null Configuration
    constructor argument anymore.)
  - When specifying the templateUpdateDelay configuration setting with a String (with Properties), the time unit is
    required, unless the value is 0.
- setSetting (and the like) doesn't throw ParseException (the same exception used when parsing templates) anymore, but ConfigurationException.
  Also, on the places where ParseException was used for other than template   parsing, o.a.f.core.util.GenericParseException is used now instead,
  which doesn't have the template parsing related fields that we can't fill.
